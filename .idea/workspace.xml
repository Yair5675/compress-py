<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="15464823-9ac5-4919-a2d6-4ca3dc644072" name="Changes" comment="Created the HuffmanTree: A binary tree responsible for mapping small bits as identifiers for byte values.&#10;Currently, the class is initialized and builds the tree itself, but is yet to calculate the identifiers based on the tree">
      <change afterPath="$PROJECT_DIR$/compressors/huffman/identifiers.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/compressors/huffman/tree.py" beforeDir="false" afterPath="$PROJECT_DIR$/compressors/huffman/tree.py" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="2oDCwpNVBjzHawuRP06LYLA2etl" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Python.__init__.executor&quot;: &quot;Run&quot;,
    &quot;Python.encoding_dict.executor&quot;: &quot;Run&quot;,
    &quot;Python.main.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;
  }
}</component>
  <component name="RunManager">
    <configuration name="main" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
      <module name="compress-py" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/main.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Python.main" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-eebebe6c2be4-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.15325.20" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="15464823-9ac5-4919-a2d6-4ca3dc644072" name="Changes" comment="" />
      <created>1730395000595</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1730395000595</updated>
    </task>
    <task id="LOCAL-00001" summary="Initial commit">
      <option name="closed" value="true" />
      <created>1730395211890</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1730395211891</updated>
    </task>
    <task id="LOCAL-00002" summary="Created the compressors package where different compression algorithms will be implemented, and added the base interface all implementations will adhere to">
      <option name="closed" value="true" />
      <created>1730396245316</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1730396245316</updated>
    </task>
    <task id="LOCAL-00003" summary="Created the `lzw` package - an inner package that will contain the logic of the LZW compression algorithm.&#10;The init file holds the main Compressor, and its skeleton was written.&#10;A class representing the dictionary used in the encoding process was also written comprehensively">
      <option name="closed" value="true" />
      <created>1730403373370</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1730403373370</updated>
    </task>
    <task id="LOCAL-00004" summary="Two changes:&#10;1) A new private attribute 'keys_set' was created. This change heavily optimizes searching for a key, from O(n) time complexity (key in self.__encoded_values.keys()) to O(1) time complexity (key in self.__keys_set)&#10;&#10;2) The 'current_size' property and attribute was removed. Instead, the __len__ method is implemented to return the amount of keys in the dictionary (which is also the amount of entries)">
      <option name="closed" value="true" />
      <created>1730404138316</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1730404138316</updated>
    </task>
    <task id="LOCAL-00005" summary="Big change:&#10;The purpose of the encoding dictionary is to assign indices to given keys and make sure each index is unique. For this reason, it does not make sense to allow outside code to change the index of an existing key using __setitem__.&#10;For this reason, inserting keys is now done using the 'insert' method, and a new attribute keeps track of the next index that will be mapped upon insertion">
      <option name="closed" value="true" />
      <created>1730408636362</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1730408636362</updated>
    </task>
    <task id="LOCAL-00006" summary="Created the function that parses input data into a list of encoder dictionary indices.&#10;Note that this method does not handle the potential `TooManyEncodingsException`. This is intentional, and the exception will be later propagated upwards in the `encode` method">
      <option name="closed" value="true" />
      <created>1730409491698</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1730409491698</updated>
    </task>
    <task id="LOCAL-00007" summary="Created the function that takes the parsed indices, and turns them into one `bytes` object.&#10;The function needs to pad those indices for the decompression step to know where an index starts and ends, but it does so while using as little memory as needed">
      <option name="closed" value="true" />
      <created>1730411468340</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1730411468340</updated>
    </task>
    <task id="LOCAL-00008" summary="Finished the `encode` method by using the two previously coded methods">
      <option name="closed" value="true" />
      <created>1730411676858</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1730411676858</updated>
    </task>
    <task id="LOCAL-00009" summary="Changed the container of the indices from a list to a deque, to optimize appending to it in the case of a lot of indices">
      <option name="closed" value="true" />
      <created>1730411881904</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1730411881904</updated>
    </task>
    <task id="LOCAL-00010" summary="Created a generator function that iterates through padded encoded data and lazily extracts the encoded indices from it (one at a time)">
      <option name="closed" value="true" />
      <created>1730415753416</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1730415753416</updated>
    </task>
    <task id="LOCAL-00011" summary="Completed the decompression function using the indices iterator and a simplified decoder dictionary">
      <option name="closed" value="true" />
      <created>1730417330335</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1730417330335</updated>
    </task>
    <task id="LOCAL-00012" summary="Fixed some bugs:&#10;1) Import naming problem (had to add a dot before `encoding_dict`).&#10;2) In the encoded indices iterator, forgot to add to the byte index after reading the index.&#10;3) Apparently indexing a bytes object gives you an int. Caused a problem when concatenating a byte to a byte">
      <option name="closed" value="true" />
      <created>1730418623109</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1730418623109</updated>
    </task>
    <task id="LOCAL-00013" summary="Major bug fix: The decoding step was adding ascii values to the dictionary, causing all encoded values that are processed later to point to the wrong bytes">
      <option name="closed" value="true" />
      <created>1730418881211</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1730418881211</updated>
    </task>
    <task id="LOCAL-00014" summary="When decoding the bytes, they are now saved in a deque and joined at the end of the 'decode' method, instead of appended to a single bytes object.&#10;This change introduces a significant performance improvement (in one test, it reduced decoding time from 33 seconds to just 1.8)">
      <option name="closed" value="true" />
      <created>1730466250535</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1730466250535</updated>
    </task>
    <task id="LOCAL-00015" summary="When decoding the bytes, they are now saved in a deque and joined at the end of the 'decode' method, instead of appended to a single bytes object.&#10;This change introduces a significant performance improvement (in one test, it reduced decoding time from 33 seconds to just 1.8)">
      <option name="closed" value="true" />
      <created>1730466504661</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1730466504661</updated>
    </task>
    <task id="LOCAL-00016" summary="Created the huffman nested package where an implementation of the huffman coding technique will be implemented. The main class (HuffmanCompressor)'s skeleton was written">
      <option name="closed" value="true" />
      <created>1730473584984</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1730473584984</updated>
    </task>
    <task id="LOCAL-00017" summary="Micro-optimization: When padding the encoded indices, the important bytes of each index are now stored in little endian format. This just saves the program from having to reverse the bytes for each index">
      <option name="closed" value="true" />
      <created>1730474882817</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1730474882817</updated>
    </task>
    <task id="LOCAL-00018" summary="Created the HuffmanTree: A binary tree responsible for mapping small bits as identifiers for byte values.&#10;Currently, the class is initialized and builds the tree itself, but is yet to calculate the identifiers based on the tree">
      <option name="closed" value="true" />
      <created>1730480431397</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1730480431397</updated>
    </task>
    <option name="localTasksCounter" value="19" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Initial commit" />
    <MESSAGE value="Created the compressors package where different compression algorithms will be implemented, and added the base interface all implementations will adhere to" />
    <MESSAGE value="Created the `lzw` package - an inner package that will contain the logic of the LZW compression algorithm.&#10;The init file holds the main Compressor, and its skeleton was written.&#10;A class representing the dictionary used in the encoding process was also written comprehensively" />
    <MESSAGE value="Two changes:&#10;1) A new private attribute 'keys_set' was created. This change heavily optimizes searching for a key, from O(n) time complexity (key in self.__encoded_values.keys()) to O(1) time complexity (key in self.__keys_set)&#10;&#10;2) The 'current_size' property and attribute was removed. Instead, the __len__ method is implemented to return the amount of keys in the dictionary (which is also the amount of entries)" />
    <MESSAGE value="Big change:&#10;The purpose of the encoding dictionary is to assign indices to given keys and make sure each index is unique. For this reason, it does not make sense to allow outside code to change the index of an existing key using __setitem__.&#10;For this reason, inserting keys is now done using the 'insert' method, and a new attribute keeps track of the next index that will be mapped upon insertion" />
    <MESSAGE value="Created the function that parses input data into a list of encoder dictionary indices.&#10;Note that this method does not handle the potential `TooManyEncodingsException`. This is intentional, and the exception will be later propagated upwards in the `encode` method" />
    <MESSAGE value="Created the function that takes the parsed indices, and turns them into one `bytes` object.&#10;The function needs to pad those indices for the decompression step to know where an index starts and ends, but it does so while using as little memory as needed" />
    <MESSAGE value="Finished the `encode` method by using the two previously coded methods" />
    <MESSAGE value="Changed the container of the indices from a list to a deque, to optimize appending to it in the case of a lot of indices" />
    <MESSAGE value="Created a generator function that iterates through padded encoded data and lazily extracts the encoded indices from it (one at a time)" />
    <MESSAGE value="Completed the decompression function using the indices iterator and a simplified decoder dictionary" />
    <MESSAGE value="Fixed some bugs:&#10;1) Import naming problem (had to add a dot before `encoding_dict`).&#10;2) In the encoded indices iterator, forgot to add to the byte index after reading the index.&#10;3) Apparently indexing a bytes object gives you an int. Caused a problem when concatenating a byte to a byte" />
    <MESSAGE value="Major bug fix: The decoding step was adding ascii values to the dictionary, causing all encoded values that are processed later to point to the wrong bytes" />
    <MESSAGE value="When decoding the bytes, they are now saved in a deque and joined at the end of the 'decode' method, instead of appended to a single bytes object.&#10;This change introduces a significant performance improvement (in one test, it reduced decoding time from 33 seconds to just 1.8)" />
    <MESSAGE value="Created the huffman nested package where an implementation of the huffman coding technique will be implemented. The main class (HuffmanCompressor)'s skeleton was written" />
    <MESSAGE value="Micro-optimization: When padding the encoded indices, the important bytes of each index are now stored in little endian format. This just saves the program from having to reverse the bytes for each index" />
    <MESSAGE value="Created the HuffmanTree: A binary tree responsible for mapping small bits as identifiers for byte values.&#10;Currently, the class is initialized and builds the tree itself, but is yet to calculate the identifiers based on the tree" />
    <option name="LAST_COMMIT_MESSAGE" value="Created the HuffmanTree: A binary tree responsible for mapping small bits as identifiers for byte values.&#10;Currently, the class is initialized and builds the tree itself, but is yet to calculate the identifiers based on the tree" />
  </component>
  <component name="XDebuggerManager">
    <watches-manager>
      <configuration name="PythonConfigurationType">
        <watch expression="self._LzwCompressor__encoder_dict._EncodingDict__encoded_values" />
      </configuration>
    </watches-manager>
  </component>
</project>